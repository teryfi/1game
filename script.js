// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let clicks = 0;
let laserCount = 0;
let feederCount = 0;
let trainerCount = 0;
let robotPurchased = false;
let hardModeActive = false;
let clicksLastTime = 0;
let autoClickInterval;
let hardModeInterval;
let inverted = false;
let clicksBlocked = false;
let fakeCatActive = false;
let virusCats = [];
let virusActive = false;

// DOM-—ç–ª–µ–º–µ–Ω—Ç—ã
const startBtn = document.querySelector('.start-btn');
const startScreen = document.querySelector('.start-screen');
const mainGame = document.querySelector('.container');
const counter = document.querySelector('.counter');
const catImage = document.querySelector('.cat-image');
const jokeDisplay = document.querySelector('.joke-display');
const upgrades = document.querySelectorAll('.upgrade-card');
const modeBtn = document.querySelector('.mode-btn');

// –ó–≤—É–∫–∏
const clickSound = new Audio('assets/click.mp3');
const meowSound = new Audio('assets/meow.mp3');
const coinSound = new Audio('assets/coin.mp3');

// –°–ª—É—á–∞–π–Ω—ã–µ —à—É—Ç–∫–∏
const jokes = [
    "–¢—ã –º–Ω–µ –Ω—Ä–∞–≤–∏—à—å—Å—è...",
    "–Ø ‚Äî –∫–æ—Ä–æ–ª—å –∫–ª–∏–∫–µ—Ä–∞!",
    "–ï—à—å –º–µ–Ω—è, —è –≤–∫—É—Å–Ω—ã–π!",
    "–¢—ã –º–æ–π –ª—É—á—à–∏–π –¥—Ä—É–≥!",
    "–ö–ª–∏–∫–∞–π –±—ã—Å—Ç—Ä–µ–µ, —è –∂–¥—É!"
];

// –í—Ä–µ–¥–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
const hardModeEffects = [
    // 1. –°–±—Ä–æ—Å 30% –∫–ª–∏–∫–æ–≤
    () => {
        clicks = Math.floor(clicks * 0.7);
        alert("–ö–æ—Ç –æ–±–∏–¥–µ–ª—Å—è –∏ —É–±–µ–∂–∞–ª —Å 30% —Ç–≤–æ–∏—Ö –∫–ª–∏–∫–æ–≤!");
    },
    // 2. –ò–Ω–≤–µ—Ä—Å–∏—è –∫–ª–∏–∫–æ–≤
    () => {
        inverted = true;
        alert("–ò–Ω–≤–µ—Ä—Å–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –ö–ª–∏–∫–∞–π –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ...");
        setTimeout(() => inverted = false, 10000);
    },
    // 3. –¢—Ä—è—Å–∫–∞ —ç–∫—Ä–∞–Ω–∞
    () => {
        document.body.style.animation = "shake 0.5s";
        setTimeout(() => document.body.style.animation = "", 500);
        alert("–ö–æ—Ç —É—Å—Ç—Ä–æ–∏–ª –∑–µ–º–ª–µ—Ç—Ä—è—Å–µ–Ω–∏–µ!");
    },
    // 4. –ü–µ—Ä–µ–≤–æ—Ä–æ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    () => {
        document.body.classList.add('flipped');
        setTimeout(() => document.body.classList.remove('flipped'), 8000);
        alert("–ö–æ—Ç –ø–µ—Ä–µ–≤–µ—Ä–Ω—É–ª –≤—Å—ë! –ë–µ–≥–∏!");
    },
    // 5. –ó–∞–¥–µ—Ä–∂–∫–∞ –∫–ª–∏–∫–æ–≤
    () => {
        clicksBlocked = true;
        alert("–ö–æ—Ç —Å–ø–∏—Ç. –ö–ª–∏–∫–∞—Ç—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥!");
        setTimeout(() => clicksBlocked = false, 10000);
    },
    // 6. –§–∞–ª—å—à–∏–≤—ã–π –∫–æ—Ç
    () => {
        fakeCatActive = true;
        const fakeCat = document.createElement('div');
        fakeCat.className = 'fake-cat';
        fakeCat.style.left = Math.random() * (window.innerWidth - 100) + 'px';
        fakeCat.style.top = Math.random() * (window.innerHeight - 100) + 'px';
        fakeCat.onclick = () => {
            clicks -= 10;
            alert("–§–∞–ª—å—à–∏–≤—ã–π –∫–æ—Ç —Å–±–µ–∂–∞–ª —Å —Ç–≤–æ–∏–º–∏ –∫–ª–∏–∫–∞–º–∏!");
            document.body.removeChild(fakeCat);
            fakeCatActive = false;
        };
        document.body.appendChild(fakeCat);
        setTimeout(() => {
            if (fakeCatActive) {
                document.body.removeChild(fakeCat);
                alert("–§–∞–ª—å—à–∏–≤—ã–π –∫–æ—Ç –∏—Å—á–µ–∑ —Å–∞–º!");
                fakeCatActive = false;
            }
        }, 15000);
    },
    // 7. –õ–æ–∂–Ω–∞—è –æ—à–∏–±–∫–∞
    () => {
        alert("–û—à–∏–±–∫–∞ 418: –ö–æ—Ç ‚Äî —á–∞–π–Ω–∏–∫. –í—Å—ë –ø–æ—Ç–µ—Ä—è–Ω–æ!");
        setTimeout(() => alert("–®—É—Ç–∫–∞ üò∏"), 1000);
    },
    // 8. "–í–∏—Ä—É—Å"
    () => {
        virusActive = true;
        virusCats = [];
        for (let i = 0; i < 5; i++) {
            const cat = document.createElement('div');
            cat.className = 'virus-cats';
            cat.style.left = Math.random() * (window.innerWidth - 100) + 'px';
            cat.style.top = Math.random() * (window.innerHeight - 100) + 'px';
            cat.onclick = () => {
                virusCats = virusCats.filter(c => c !== cat);
                cat.remove();
                if (virusCats.length === 0) {
                    alert("–í–∏—Ä—É—Å —É–Ω–∏—á—Ç–æ–∂–µ–Ω!");
                    virusActive = false;
                }
            };
            virusCats.push(cat);
            document.body.appendChild(cat);
        }
        alert("–í–∏—Ä—É—Å! –ù–∞–∂–º–∏ –Ω–∞ –≤—Å–µ—Ö –∫–æ—Ç–æ–≤!");
document.body.style.animation = "shake 0.5s";
        setTimeout(() => document.body.style.animation = "", 500);
        alert("–ö–æ—Ç —É—Å—Ç—Ä–æ–∏–ª –∑–µ–º–ª–µ—Ç—Ä—è—Å–µ–Ω–∏–µ!");
    },
];  

// –°—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω
document.addEventListener('DOMContentLoaded', () => {
    setTimeout(() => {
        startScreen.classList.remove('show');
    }, 3000);
});

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
startBtn.addEventListener('click', () => {
    startScreen.style.display = 'none';
    mainGame.style.display = 'block';
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function updateUI() {
    counter.textContent = Math.floor(clicks);
    upgrades.forEach(upgrade => {
        const type = upgrade.dataset.type;
        let baseCost = parseInt(upgrade.dataset.baseCost);
        let currentCost;

        switch (type) {
            case 'laser':
                currentCost = 50 * Math.pow(1.5, laserCount);
                break;
            case 'feeder':
                currentCost = 200 * Math.pow(2, feederCount);
                break;
            case 'trainer':
                currentCost = 500 * Math.pow(2, trainerCount);
                break;
            case 'robot':
                currentCost = 1000;
                break;
        }

        const priceElement = upgrade.querySelector('.upgrade-price');
        priceElement.textContent = `${Math.floor(currentCost)} –∫–ª–∏–∫–æ–≤`;
        upgrade.querySelector('.upgrade-btn').disabled = clicks < currentCost;
    });

    modeBtn.textContent = hardModeActive ? "–í—ã–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º" : "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∂–∏–º";
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–æ—Ç—É
catImage.addEventListener('click', () => {
    if (Date.now() - clicksLastTime < 500 || clicksBlocked) return;
    clicksLastTime = Date.now();

    clickSound.play();
    let multiplier = 1;
    multiplier *= Math.pow(2, laserCount);
    multiplier *= Math.pow(2, trainerCount);
    multiplier *= inverted ? -1 : 1;

    clicks += Math.floor(1 * multiplier);
    updateUI();

    // –ì–ª—é–∫–∏
    if (Math.random() < 0.1) {
        jokeDisplay.textContent = "–ö–æ—Ç —Å–¥–µ–ª–∞–ª –≤–∏–¥, —á—Ç–æ —Ç–µ–±—è –Ω–µ –∑–∞–º–µ—Ç–∏–ª!";
        setTimeout(() => jokeDisplay.textContent = "", 2000);
        return;
    }

    if (Math.random() < 0.05) {
        meowSound.play();
        alert("–ú–Ø–£!");
    }

    const joke = jokes[Math.floor(Math.random() * jokes.length)];
    jokeDisplay.textContent = joke;
    setTimeout(() => jokeDisplay.textContent = "", 2000);
});

// –ê–ø–≥—Ä–µ–π–¥—ã
upgrades.forEach(upgrade => {
    const btn = upgrade.querySelector('.upgrade-btn');
    const type = upgrade.dataset.type;

    btn.addEventListener('click', () => {
        let baseCost = parseInt(upgrade.dataset.baseCost);
        let currentCost;

        switch (type) {
            case 'laser':
                currentCost = 50 * Math.pow(1.5, laserCount);
                if (clicks >= currentCost) {
                    clicks -= currentCost;
                    coinSound.play();
                    laserCount++;
                    updateUI();
                }
                break;
            case 'feeder':
                currentCost = 200 * Math.pow(2, feederCount);
                if (clicks >= currentCost) {
                    clicks -= currentCost;
                    coinSound.play();
                    feederCount++;
                    clearInterval(autoClickInterval);
                    autoClickInterval = setInterval(() => {
                        clicks += feederCount * 1;
                        updateUI();
                    }, 1000);
                    updateUI();
                }
                break;
            case 'trainer':
                currentCost = 500 * Math.pow(2, trainerCount);
                if (clicks >= currentCost) {
                    clicks -= currentCost;
                    coinSound.play();
                    trainerCount++;
                    updateUI();
                }
                break;
            case 'robot':
                if (clicks >= 1000 && !robotPurchased) {
                    clicks -= 1000;
                    coinSound.play();
                    robotPurchased = true;
                    clearInterval(autoClickInterval);
                    autoClickInterval = setInterval(() => {
                        clicks += 5;
                        updateUI();
                    }, 1000);
                    updateUI();
                }
                break;
        }
    });
});

// –†–µ–∂–∏–º "–ù–µ–≤–æ–∑–º–æ–∂–Ω—ã–π"
modeBtn.addEventListener('click', () => {
    if (!hardModeActive) {
        hardModeActive = true;
        hardModeInterval = setInterval(() => {
            const effect = hardModeEffects[Math.floor(Math.random() * hardModeEffects.length)];
            effect();
            updateUI();
        }, 3000);
    } else {
        hardModeActive = false;
        clearInterval(hardModeInterval);
        inverted = false;
        clicksBlocked = false;
        document.body.classList.remove('flipped');
        virusActive = false;
        virusCats.forEach(cat => document.body.removeChild(cat));
        virusCats = [];
    }
    updateUI();
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
updateUI();